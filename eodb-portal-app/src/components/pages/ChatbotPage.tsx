import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'motion/react';
import { 
  MessageSquare, 
  Send,
  Bot,
  RefreshCw,
  Languages,
  Volume2,
  VolumeX,
  Mic,
  MicOff,
  Download,
  Paperclip,
  Plus,
  X,
  Settings,
  Sparkles,
  Shield,
  Search,
  Zap,
  Brain,
  MessageCircle,
  FileText,
  Award,
  Building2,
  Clock,
  Star,
  ThumbsUp,
  Bookmark
} from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Button } from '../ui/button';
import { Input } from '../ui/input';
import { Badge } from '../ui/badge';
import { Avatar, AvatarFallback } from '../ui/avatar';
import { ScrollArea } from '../ui/scroll-area';
import { Switch } from '../ui/switch';
import { Label } from '../ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';
import { Separator } from '../ui/separator';
import { dataService } from '../../utils/supabase/client';

interface Message {
  id: string;
  type: 'user' | 'bot';
  content: string;
  timestamp: Date;
  suggestions?: string[];
  actionItems?: any[];
  attachments?: any[];
  metadata?: {
    confidence?: number;
    processingTime?: number;
    sources?: string[];
    intent?: string;
  };
  liked?: boolean;
  bookmarked?: boolean;
  isTyping?: boolean;
}

interface Attachment {
  id: string;
  name: string;
  type: string;
  size: number;
  url: string;
}

interface ChatbotPageProps {
  language: 'en' | 'hi';
}

export function ChatbotPage({ language }: ChatbotPageProps) {
  const translations = {
    en: {
      title: 'AI Assistant',
      subtitle: 'Advanced AI-powered support with real-time problem solving',
      securePrivate: 'Secure & Private',
      clear: 'Clear',
      online: 'AI Assistant - Online',
      messages: 'messages',
      messagePlaceholder: 'Type your message here...',
      suggestions: 'Suggestions:',
      voiceNotSupported: 'Voice input is not supported in this browser',
      greeting: 'ЁЯЩП Namaste! I\'m your AI Assistant for the EODB Portal. I can help you with:\n\nЁЯПв License applications and registrations\nЁЯУЛ Compliance requirements and deadlines\nЁЯОп Government schemes and incentives\nЁЯУК Application status tracking\nЁЯУЪ Document requirements\nЁЯФН Search and recommendations\n\nWhat would you like to know about your business journey today?',
      defaultSuggestions: [
        'How to apply for a trade license?',
        'What documents do I need for GST registration?',
        'Show me available schemes for startups',
        'Check my application status',
        'Upcoming compliance deadlines'
      ],
      errorMessage: 'Sorry, I had trouble processing your request. Please try again or rephrase your question.',
      errorSuggestions: ['Try asking differently', 'Contact support', 'View help topics'],
      quickActions: {
        licenses: {
          category: 'Licenses',
          actions: [
            'How to apply for a trade license?',
            'GST registration process',
            'Environmental clearance requirements',
            'Fire safety certificate process'
          ]
        },
        schemes: {
          category: 'Schemes',
          actions: [
            'Startup India benefits',
            'MSME schemes available',
            'Digital India initiatives',
            'Export promotion schemes'
          ]
        },
        compliance: {
          category: 'Compliance',
          actions: [
            'Upcoming deadlines',
            'Annual filing requirements',
            'Tax compliance checklist',
            'Regulatory updates'
          ]
        },
        support: {
          category: 'Support',
          actions: [
            'Contact support team',
            'Schedule consultation',
            'Technical assistance',
            'Document help'
          ]
        }
      },
      capabilities: [
        'Voice Recognition',
        'Text-to-Speech',
        'Context Awareness',
        'Smart Suggestions',
        'Multi-language',
        'Secure Chat'
      ],
      settings: {
        voiceEnabled: 'Voice Input',
        autoPlay: 'Auto-play Responses',
        contextualMode: 'Contextual Mode',
        smartSuggestions: 'Smart Suggestions',
        aiModel: 'AI Model'
      }
    },
    hi: {
      title: 'рдПрдЖрдИ рд╕рд╣рд╛рдпрдХ',
      subtitle: 'рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд╕рдордп рд╕рдорд╕реНрдпрд╛ рд╕рдорд╛рдзрд╛рди рдХреЗ рд╕рд╛рде рдЙрдиреНрдирдд рдПрдЖрдИ-рд╕рдВрдЪрд╛рд▓рд┐рдд рд╕рд╣рд╛рдпрддрд╛',
      securePrivate: 'рд╕реБрд░рдХреНрд╖рд┐рдд рдФрд░ рдирд┐рдЬреА',
      clear: 'рд╕рд╛рдлрд╝ рдХрд░реЗрдВ',
      online: 'рдПрдЖрдИ рд╕рд╣рд╛рдпрдХ - рдСрдирд▓рд╛рдЗрди',
      messages: 'рд╕рдВрджреЗрд╢',
      messagePlaceholder: 'рдЕрдкрдирд╛ рд╕рдВрджреЗрд╢ рдпрд╣рд╛рдБ рд▓рд┐рдЦреЗрдВ...',
      suggestions: 'рд╕реБрдЭрд╛рд╡:',
      voiceNotSupported: 'рд╡реЙрдпрд╕ рдЗрдирдкреБрдЯ рдЗрд╕ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдореЗрдВ рд╕рдорд░реНрдерд┐рдд рдирд╣реАрдВ рд╣реИ',
      greeting: 'ЁЯЩП рдирдорд╕реНрддреЗ! рдореИрдВ рдИрдУрдбреАрдмреА рдкреЛрд░реНрдЯрд▓ рдХреЗ рд▓рд┐рдП рдЖрдкрдХрд╛ рдПрдЖрдИ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдореИрдВ рдЗрд╕рдореЗрдВ рдЖрдкрдХреА рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ:\n\nЁЯПв рд▓рд╛рдЗрд╕реЗрдВрд╕ рдЖрд╡реЗрджрди рдФрд░ рдкрдВрдЬреАрдХрд░рдг\nЁЯУЛ рдЕрдиреБрдкрд╛рд▓рди рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдВ рдФрд░ рд╕рдордп рд╕реАрдорд╛\nЁЯОп рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ рдФрд░ рдкреНрд░реЛрддреНрд╕рд╛рд╣рди\nЁЯУК рдЖрд╡реЗрджрди рд╕реНрдерд┐рддрд┐ рдЯреНрд░реИрдХрд┐рдВрдЧ\nЁЯУЪ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдВ\nЁЯФН рдЦреЛрдЬ рдФрд░ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ\n\nрдЖрдЬ рдЖрдк рдЕрдкрдиреА рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдпрд╛рддреНрд░рд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреНрдпрд╛ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?',
      defaultSuggestions: [
        'рд╡реНрдпрд╛рдкрд╛рд░ рд▓рд╛рдЗрд╕реЗрдВрд╕ рдХреЗ рд▓рд┐рдП рдХреИрд╕реЗ рдЖрд╡реЗрджрди рдХрд░реЗрдВ?',
        'рдЬреАрдПрд╕рдЯреА рдкрдВрдЬреАрдХрд░рдг рдХреЗ рд▓рд┐рдП рдореБрдЭреЗ рдХреМрди рд╕реЗ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдЪрд╛рд╣рд┐рдП?',
        'рд╕реНрдЯрд╛рд░реНрдЯрдЕрдк рдХреЗ рд▓рд┐рдП рдЙрдкрд▓рдмреНрдз рдпреЛрдЬрдирд╛рдПрдВ рджрд┐рдЦрд╛рдПрдВ',
        'рдореЗрд░реА рдЖрд╡реЗрджрди рд╕реНрдерд┐рддрд┐ рдЬрд╛рдВрдЪреЗрдВ',
        'рдЖрдЧрд╛рдореА рдЕрдиреБрдкрд╛рд▓рди рд╕рдордп рд╕реАрдорд╛'
      ],
      errorMessage: 'рдорд╛рдл рдХрд░реЗрдВ, рдореБрдЭреЗ рдЖрдкрдХреЗ рд╕рд╡рд╛рд▓ рдХреЛ рд╕рдордЭрдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИ рд╣реИред рдХреГрдкрдпрд╛ рджреЛрдмрд╛рд░рд╛ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред',
      errorSuggestions: ['рдЕрд▓рдЧ рддрд░реАрдХреЗ рд╕реЗ рдкреВрдЫреЗрдВ', 'рд╕рд╣рд╛рдпрддрд╛ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ', 'рд╕рд╣рд╛рдпрддрд╛ рд╡рд┐рд╖рдп рджреЗрдЦреЗрдВ'],
      quickActions: {
        licenses: {
          category: 'рд▓рд╛рдЗрд╕реЗрдВрд╕',
          actions: [
            'рд╡реНрдпрд╛рдкрд╛рд░ рд▓рд╛рдЗрд╕реЗрдВрд╕ рдХреЗ рд▓рд┐рдП рдХреИрд╕реЗ рдЖрд╡реЗрджрди рдХрд░реЗрдВ?',
            'рдЬреАрдПрд╕рдЯреА рдкрдВрдЬреАрдХрд░рдг рдкреНрд░рдХреНрд░рд┐рдпрд╛',
            'рдкрд░реНрдпрд╛рд╡рд░рдг рдордВрдЬреВрд░реА рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдВ',
            'рдЕрдЧреНрдирд┐ рд╕реБрд░рдХреНрд╖рд╛ рдкреНрд░рдорд╛рдгрдкрддреНрд░ рдкреНрд░рдХреНрд░рд┐рдпрд╛'
          ]
        },
        schemes: {
          category: 'рдпреЛрдЬрдирд╛рдПрдВ',
          actions: [
            'рд╕реНрдЯрд╛рд░реНрдЯрдЕрдк рдЗрдВрдбрд┐рдпрд╛ рд▓рд╛рдн',
            'рдПрдордПрд╕рдПрдордИ рдпреЛрдЬрдирд╛рдПрдВ рдЙрдкрд▓рдмреНрдз',
            'рдбрд┐рдЬрд┐рдЯрд▓ рдЗрдВрдбрд┐рдпрд╛ рдкрд╣рд▓',
            'рдирд┐рд░реНрдпрд╛рдд рд╕рдВрд╡рд░реНрдзрди рдпреЛрдЬрдирд╛рдПрдВ'
          ]
        },
        compliance: {
          category: 'рдЕрдиреБрдкрд╛рд▓рди',
          actions: [
            'рдЖрдЧрд╛рдореА рд╕рдордп рд╕реАрдорд╛',
            'рд╡рд╛рд░реНрд╖рд┐рдХ рдлрд╛рдЗрд▓рд┐рдВрдЧ рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдВ',
            'рдХрд░ рдЕрдиреБрдкрд╛рд▓рди рдЪреЗрдХрд▓рд┐рд╕реНрдЯ',
            'рдирд┐рдпрд╛рдордХ рдЕрдкрдбреЗрдЯ'
          ]
        },
        support: {
          category: 'рд╕рд╣рд╛рдпрддрд╛',
          actions: [
            'рд╕рд╣рд╛рдпрддрд╛ рдЯреАрдо рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ',
            'рдкрд░рд╛рдорд░реНрд╢ рд╢реЗрдбреНрдпреВрд▓ рдХрд░реЗрдВ',
            'рддрдХрдиреАрдХреА рд╕рд╣рд╛рдпрддрд╛',
            'рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рд╕рд╣рд╛рдпрддрд╛'
          ]
        }
      },
      capabilities: [
        'рд╡реЙрдпрд╕ рдкрд╣рдЪрд╛рди',
        'рдЯреЗрдХреНрд╕реНрдЯ-рдЯреВ-рд╕реНрдкреАрдЪ',
        'рд╕рдВрджрд░реНрдн рдЬрд╛рдЧрд░реВрдХрддрд╛',
        'рд╕реНрдорд╛рд░реНрдЯ рд╕реБрдЭрд╛рд╡',
        'рдмрд╣реБрднрд╛рд╖реА',
        'рд╕реБрд░рдХреНрд╖рд┐рдд рдЪреИрдЯ'
      ],
      settings: {
        voiceEnabled: 'рд╡реЙрдпрд╕ рдЗрдирдкреБрдЯ',
        autoPlay: 'рдСрдЯреЛ-рдкреНрд▓реЗ рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛рдПрдВ',
        contextualMode: 'рд╕рдВрджрд░реНрднрд┐рдд рдореЛрдб',
        smartSuggestions: 'рд╕реНрдорд╛рд░реНрдЯ рд╕реБрдЭрд╛рд╡',
        aiModel: 'рдПрдЖрдИ рдореЙрдбрд▓'
      }
    }
  };

  const t = translations[language];

  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'bot',
      content: t.greeting,
      timestamp: new Date(),
      suggestions: t.defaultSuggestions,
      metadata: {
        confidence: 100,
        processingTime: 0,
        intent: 'greeting'
      }
    }
  ]);
  
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState<'en' | 'hi'>(language);
  const [voiceEnabled, setVoiceEnabled] = useState(true);
  const [autoPlay, setAutoPlay] = useState(false);
  const [contextualMode, setContextualMode] = useState(true);
  const [smartSuggestions, setSmartSuggestions] = useState(true);
  const [selectedModel, setSelectedModel] = useState('advanced');
  const [attachments, setAttachments] = useState<Attachment[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const speechServices = useRef<any>({});

  // Initialize speech services
  useEffect(() => {
    if (typeof window !== 'undefined' && 'speechSynthesis' in window) {
      speechServices.current.synthesis = window.speechSynthesis;
    }
    if (typeof window !== 'undefined' && 'webkitSpeechRecognition' in window) {
      speechServices.current.recognition = new (window as any).webkitSpeechRecognition();
    }
  }, []);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Enhanced AI response with comprehensive user-specific problem solving
  const generateRealTimeResponse = (query: string): string => {
    const lowerQuery = query.toLowerCase();
    
    // License renewal queries
    if (lowerQuery.includes('renew') || lowerQuery.includes('renewal') || 
        lowerQuery.includes('рдирд╡реАрдиреАрдХрд░рдг') || lowerQuery.includes('рд░рд┐рдиреНрдпреВ')) {
      return language === 'hi' 
        ? `ЁЯФД **рд▓рд╛рдЗрд╕реЗрдВрд╕ рдирд╡реАрдиреАрдХрд░рдг рд╕рд╣рд╛рдпрддрд╛**\n\n**рдЖрдкрдХреЗ рдирд╡реАрдиреАрдХрд░рдг рд╡рд┐рдХрд▓реНрдк:**\nтАв рддрддреНрдХрд╛рд▓ рдСрдирд▓рд╛рдЗрди рдирд╡реАрдиреАрдХрд░рдг\nтАв рдорд╛рдирдХ рдирд╡реАрдиреАрдХрд░рдг (15-20 рджрд┐рди)\nтАв рддреНрд╡рд░рд┐рдд рдирд╡реАрдиреАрдХрд░рдг (5-7 рджрд┐рди)\n\n**рдЖрдкрдХреЗ рдореМрдЬреВрджрд╛ рд▓рд╛рдЗрд╕реЗрдВрд╕:**\nЁЯЪи рд╡реНрдпрд╛рдкрд╛рд░ рд▓рд╛рдЗрд╕реЗрдВрд╕ - рд╕рдорд╛рдкреНрдд рд╣реЛ рдЧрдпрд╛\nтЪая╕П рдЕрдЧреНрдирд┐ рд╕реБрд░рдХреНрд╖рд╛ рдкреНрд░рдорд╛рдгрдкрддреНрд░ - 7 рджрд┐рдиреЛрдВ рдореЗрдВ рд╕рдорд╛рдкреНрдд\nтЬЕ рдкрд░реНрдпрд╛рд╡рд░рдг рдордВрдЬреВрд░реА - рд╕рдХреНрд░рд┐рдп\n\n**рддрддреНрдХрд╛рд▓ рдХрд╛рд░реНрдп:** рдирд╡реАрдиреАрдХрд░рдг рдкреГрд╖реНрда рдкрд░ рдЬрд╛рдПрдВ рдФрд░ рдЕрдкрдиреЗ рд╕рдорд╛рдкреНрдд рд╣реЛ рдЪреБрдХреЗ рд▓рд╛рдЗрд╕реЗрдВрд╕ рдХреЛ рдирд╡реАрдиреАрдХреГрдд рдХрд░реЗрдВред`
        : `ЁЯФД **License Renewal Assistance**\n\n**Your Renewal Options:**\nтАв Instant online renewal\nтАв Standard renewal (15-20 days)\nтАв Expedited renewal (5-7 days)\n\n**Your Current Licenses:**\nЁЯЪи Trade License - Expired\nтЪая╕П Fire Safety Certificate - Expires in 7 days\nтЬЕ Environmental Clearance - Active\n\n**Immediate Action:** Go to renewal page and renew your expired licenses.`;
    }

    // Application status queries
    if (lowerQuery.includes('status') || lowerQuery.includes('track') || lowerQuery.includes('progress') ||
        lowerQuery.includes('рд╕реНрдерд┐рддрд┐') || lowerQuery.includes('рдЯреНрд░реИрдХ') || lowerQuery.includes('рдкреНрд░рдЧрддрд┐')) {
      return language === 'hi'
        ? `ЁЯУК **рдЖрд╡реЗрджрди рд╕реНрдерд┐рддрд┐ рдЯреНрд░реИрдХрд┐рдВрдЧ**\n\n**рдЖрдкрдХреЗ рд╣рд╛рд▓ рдХреЗ рдЖрд╡реЗрджрди:**\n\n**1. рдХрдВрдкрдиреА рдкрдВрдЬреАрдХрд░рдг (APP-2024-001)**\nтАв рд╕реНрдерд┐рддрд┐: рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рд╕рддреНрдпрд╛рдкрди рдЪрд░рдг\nтАв рдкреНрд░рдЧрддрд┐: 60% рдкреВрд░реНрдг\nтАв рдЕрдЧрд▓рд╛ рдХрджрдо: рдЕрдзрд┐рдХрд╛рд░реА рд╕рдореАрдХреНрд╖рд╛\nтАв рдЕрдиреБрдорд╛рдирд┐рдд рд╕рдордп: 3-5 рджрд┐рди\n\n**2. рдЬреАрдПрд╕рдЯреА рдкрдВрдЬреАрдХрд░рдг (GST-2024-002)**\nтАв рд╕реНрдерд┐рддрд┐: рдЕрдиреБрдореЛрджрд┐рдд\nтАв рдкреНрд░рдорд╛рдгрдкрддреНрд░ рдбрд╛рдЙрдирд▓реЛрдб рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░\n\n**рддрддреНрдХрд╛рд▓ рдХрд╛рд░реНрдп:** рдбреИрд╢рдмреЛрд░реНрдб рдкрд░ рдЬрд╛рдХрд░ рд╡рд┐рд╕реНрддреГрдд рд╕реНрдерд┐рддрд┐ рджреЗрдЦреЗрдВред`
        : `ЁЯУК **Application Status Tracking**\n\n**Your Recent Applications:**\n\n**1. Company Registration (APP-2024-001)**\nтАв Status: Document Verification Stage\nтАв Progress: 60% Complete\nтАв Next Step: Officer Review\nтАв Estimated Time: 3-5 days\n\n**2. GST Registration (GST-2024-002)**\nтАв Status: Approved\nтАв Certificate Ready for Download\n\n**Immediate Action:** Visit dashboard to view detailed status.`;
    }
    
    // Real-time problem-solving responses
    if (lowerQuery.includes('application stuck') || lowerQuery.includes('not moving') || lowerQuery.includes('delayed') ||
        lowerQuery.includes('рдЖрд╡реЗрджрди рдЕрдЯрдХрд╛') || lowerQuery.includes('рдирд╣реАрдВ рд╣реЛ рд░рд╣рд╛') || lowerQuery.includes('рджреЗрд░реА')) {
      return language === 'hi' 
        ? `ЁЯЪи **рдЖрд╡реЗрджрди рдкреНрд░рд╕рдВрд╕реНрдХрд░рдг рд╕рдорд╕реНрдпрд╛ рд╕рдорд╛рдзрд╛рди**\n\n**рд╕рдорд╕реНрдпрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг:**\nтЬЕ рд╕рднреА рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдЕрдкрд▓реЛрдб рдХрд┐рдП рдЧрдП\nтЬЕ рднреБрдЧрддрд╛рди рдкреВрд░реНрдг\nтЭМ рдЕрдзрд┐рдХрд╛рд░реА рдЕрдиреБрдореЛрджрди рд▓рдВрдмрд┐рдд\n\n**рддрддреНрдХрд╛рд▓ рд╕рдорд╛рдзрд╛рди:**\n1. **рдЕрдзрд┐рдХрд╛рд░реА рдХреЛ рд╕реАрдзреЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ:**\n   ЁЯУЮ +91-11-2345-6789\n   ЁЯУз officer.review@gov.in\n\n2. **рддреНрд╡рд░рд┐рдд рдЯреНрд░реИрдХрд┐рдВрдЧ рд╕реЗрд╡рд╛:**\n   тАв SMS рдЕрдкрдбреЗрдЯ рдЪрд╛рд▓реВ рдХрд░реЗрдВ\n   тАв рд╡реНрд╣рд╛рдЯреНрд╕рдРрдк рдЕрд▓рд░реНрдЯ рд╕реЗрдЯ рдХрд░реЗрдВ\n\n3. **рд╡реИрдХрд▓реНрдкрд┐рдХ рдХрд╛рд░реНрдп:**\n   тАв рдСрдирд▓рд╛рдЗрди рд╢рд┐рдХрд╛рдпрдд рджрд░реНрдЬ рдХрд░реЗрдВ\n   тАв рд╣реЗрд▓реНрдкрдбреЗрд╕реНрдХ рдЯрд┐рдХрдЯ рдмрдирд╛рдПрдВ\n\n**рдФрд╕рдд рд╕рдорд╛рдзрд╛рди рд╕рдордп:** 24-48 рдШрдВрдЯреЗ`
        : `ЁЯЪи **Application Processing Issue Resolution**\n\n**Problem Analysis:**\nтЬЕ All documents uploaded\nтЬЕ Payment completed\nтЭМ Officer approval pending\n\n**Immediate Solutions:**\n1. **Contact Officer Directly:**\n   ЁЯУЮ +91-11-2345-6789\n   ЁЯУз officer.review@gov.in\n\n2. **Fast Track Service:**\n   тАв Enable SMS updates\n   тАв Set WhatsApp alerts\n\n3. **Alternative Actions:**\n   тАв File online complaint\n   тАв Create helpdesk ticket\n\n**Average Resolution Time:** 24-48 hours`;
    }
    
    // Payment and fee queries
    if (lowerQuery.includes('payment') || lowerQuery.includes('fee') || lowerQuery.includes('cost') ||
        lowerQuery.includes('рднреБрдЧрддрд╛рди') || lowerQuery.includes('рд╢реБрд▓реНрдХ') || lowerQuery.includes('рдлреАрд╕')) {
      return language === 'hi'
        ? `ЁЯТ│ **рд╡рд┐рд╕реНрддреГрдд рднреБрдЧрддрд╛рди рдЧрд╛рдЗрдб**\n\n**рд╕рднреА рд╕рд░рдХрд╛рд░реА рд╢реБрд▓реНрдХ:**\n\n**рд▓рд╛рдЗрд╕реЗрдВрд╕ рд╢реБрд▓реНрдХ:**\nтАв рд╡реНрдпрд╛рдкрд╛рд░ рд▓рд╛рдЗрд╕реЗрдВрд╕: тВ╣500\nтАв рд╡реНрдпрд╛рдкрд╛рд░ рд▓рд╛рдЗрд╕реЗрдВрд╕ рдирд╡реАрдиреАрдХрд░рдг: тВ╣300\nтАв рдЕрдЧреНрдирд┐ рд╕реБрд░рдХреНрд╖рд╛ рдкреНрд░рдорд╛рдгрдкрддреНрд░: тВ╣1,200\nтАв рдкрд░реНрдпрд╛рд╡рд░рдг рдордВрдЬреВрд░реА: тВ╣2,000\n\n**рдкрдВрдЬреАрдХрд░рдг рд╢реБрд▓реНрдХ:**\nтАв рдкреНрд░рд╛рдЗрд╡реЗрдЯ рд▓рд┐рдорд┐рдЯреЗрдб рдХрдВрдкрдиреА: тВ╣8,000\nтАв рд╕рд╛рдЭреЗрджрд╛рд░реА рдлрд░реНрдо: тВ╣3,000\nтАв рдПрдХрд▓ рд╕реНрд╡рд╛рдорд┐рддреНрд╡: тВ╣1,000\n\n**рдЙрдкрд▓рдмреНрдз рднреБрдЧрддрд╛рди рд╡рд┐рдзрд┐рдпрд╛рдВ:**\nЁЯФТ UPI (рддрддреНрдХрд╛рд▓)\nЁЯФТ рдиреЗрдЯ рдмреИрдВрдХрд┐рдВрдЧ\nЁЯФТ рдХрд╛рд░реНрдб рднреБрдЧрддрд╛рди\nЁЯФТ рдбрд┐рдЬрд┐рдЯрд▓ рд╡реЙрд▓реЗрдЯ\n\n**рдЫреВрдЯ рдпреЛрдЧреНрдпрддрд╛:** MSME рдкрдВрдЬреАрдХреГрдд рд╡реНрдпрд╡рд╕рд╛рдпреЛрдВ рдХреЛ 20% рдЫреВрдЯ`
        : `ЁЯТ│ **Comprehensive Payment Guide**\n\n**All Government Fees:**\n\n**License Fees:**\nтАв Trade License: тВ╣500\nтАв Trade License Renewal: тВ╣300\nтАв Fire Safety Certificate: тВ╣1,200\nтАв Environmental Clearance: тВ╣2,000\n\n**Registration Fees:**\nтАв Private Limited Company: тВ╣8,000\nтАв Partnership Firm: тВ╣3,000\nтАв Sole Proprietorship: тВ╣1,000\n\n**Available Payment Methods:**\nЁЯФТ UPI (Instant)\nЁЯФТ Net Banking\nЁЯФТ Card Payment\nЁЯФТ Digital Wallets\n\n**Discount Eligibility:** 20% discount for MSME registered businesses`;
    }

    // Document queries
    if (lowerQuery.includes('document') || lowerQuery.includes('upload') || lowerQuery.includes('certificate') ||
        lowerQuery.includes('рджрд╕реНрддрд╛рд╡реЗрдЬрд╝') || lowerQuery.includes('рдЕрдкрд▓реЛрдб') || lowerQuery.includes('рдкреНрд░рдорд╛рдгрдкрддреНрд░')) {
      return language === 'hi'
        ? `ЁЯУЛ **рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рд╕рд╣рд╛рдпрддрд╛ рдХреЗрдВрджреНрд░**\n\n**рдЖрд╡рд╢реНрдпрдХ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдЪреЗрдХрд▓рд┐рд╕реНрдЯ:**\n\n**рд╡реНрдпрдХреНрддрд┐рдЧрдд рджрд╕реНрддрд╛рд╡реЗрдЬрд╝:**\nтЬЕ рдЖрдзрд╛рд░ рдХрд╛рд░реНрдб (рд╕реНрд╡-рд╕рддреНрдпрд╛рдкрд┐рдд)\nтЬЕ рдкреИрди рдХрд╛рд░реНрдб (рд╕реНрд╡-рд╕рддреНрдпрд╛рдкрд┐рдд)\nтЬЕ рдкрд╛рд╕рдкреЛрд░реНрдЯ рд╕рд╛рдЗрдЬ рдлреЛрдЯреЛ\nтЬЕ рд╣рд╕реНрддрд╛рдХреНрд╖рд░ рдкреНрд░рдорд╛рдг\n\n**рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝:**\nтЬЕ рдкрдВрдЬреАрдХреГрдд рдХрд╛рд░реНрдпрд╛рд▓рдп рдХрд╛ рдкрддрд╛ рдкреНрд░рдорд╛рдг\nтЬЕ рдмреИрдВрдХ рд╕реНрдЯреЗрдЯрдореЗрдВрдЯ (3 рдорд╣реАрдиреЗ)\nтЬЕ рдХрд┐рд░рд╛рдпрд╛ рд╕рдордЭреМрддрд╛/рд╕рдВрдкрддреНрддрд┐ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝\n\n**рдЕрдкрд▓реЛрдб рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢:**\nтАв рдлрд╝рд╛рдЗрд▓ рдкреНрд░рд╛рд░реВрдк: PDF, JPG, PNG\nтАв рдЕрдзрд┐рдХрддрдо рдЖрдХрд╛рд░: 5MB рдкреНрд░рддрд┐ рдлрд╝рд╛рдЗрд▓\nтАв рдЧреБрдгрд╡рддреНрддрд╛: рдЙрдЪреНрдЪ рд░рд┐рдЬрд╝реЙрд▓реНрдпреВрд╢рди, рд╕реНрдкрд╖реНрдЯ рдЯреЗрдХреНрд╕реНрдЯ\n\n**рддрддреНрдХрд╛рд▓ рд╕рд╣рд╛рдпрддрд╛:** рдбреЙрдХреНрдпреВрдореЗрдВрдЯ рд╡реЗрд░рд┐рдлрд┐рдХреЗрд╢рди рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди 1800-XXX-XXXX`
        : `ЁЯУЛ **Document Assistance Center**\n\n**Required Documents Checklist:**\n\n**Personal Documents:**\nтЬЕ Aadhaar Card (Self-attested)\nтЬЕ PAN Card (Self-attested)\nтЬЕ Passport Size Photos\nтЬЕ Signature Proof\n\n**Business Documents:**\nтЬЕ Registered Office Address Proof\nтЬЕ Bank Statement (3 months)\nтЬЕ Rent Agreement/Property Documents\n\n**Upload Guidelines:**\nтАв File Format: PDF, JPG, PNG\nтАв Max Size: 5MB per file\nтАв Quality: High resolution, clear text\n\n**Immediate Help:** Document Verification Helpline 1800-XXX-XXXX`;
    }

    // Compliance and deadline queries
    if (lowerQuery.includes('compliance') || lowerQuery.includes('deadline') || lowerQuery.includes('due') ||
        lowerQuery.includes('рдЕрдиреБрдкрд╛рд▓рди') || lowerQuery.includes('рд╕рдордп рд╕реАрдорд╛') || lowerQuery.includes('рджреЗрдп')) {
      return language === 'hi'
        ? `тП░ **рдЕрдиреБрдкрд╛рд▓рди рдХреИрд▓реЗрдВрдбрд░ рдФрд░ рдорд╣рддреНрд╡рдкреВрд░реНрдг рддрд┐рдерд┐рдпрд╛рдВ**\n\n**рдЗрд╕ рдорд╣реАрдиреЗ рдХреА рд╕рдордп рд╕реАрдорд╛рдПрдВ:**\n\nЁЯФ┤ **рддрддреНрдХрд╛рд▓ рдХрд╛рд░реНрдп (7 рджрд┐рдиреЛрдВ рдХреЗ рднреАрддрд░):**\nтАв рдЬреАрдПрд╕рдЯреА рд░рд┐рдЯрд░реНрди рдлрд╛рдЗрд▓рд┐рдВрдЧ - 20 рдЬрдирд╡рд░реА\nтАв рдЯреАрдбреАрдПрд╕ рднреБрдЧрддрд╛рди - 7 рдЬрдирд╡рд░реА\nтАв рдЕрдЧреНрдирд┐ рд╕реБрд░рдХреНрд╖рд╛ рд▓рд╛рдЗрд╕реЗрдВрд╕ рдирд╡реАрдиреАрдХрд░рдг - 15 рдЬрдирд╡рд░реА\n\nЁЯЯб **рдЖрдЧрд╛рдореА рд╕рдордп рд╕реАрдорд╛рдПрдВ (30 рджрд┐рдиреЛрдВ рдХреЗ рднреАрддрд░):**\nтАв рдЗрдирдХрдо рдЯреИрдХреНрд╕ рд░рд┐рдЯрд░реНрди - 31 рдЬрдирд╡рд░реА\nтАв рдИрдкреАрдПрдл рднреБрдЧрддрд╛рди - 15 рдлрд░рд╡рд░реА\nтАв рд╡реНрдпрд╛рдкрд╛рд░ рд▓рд╛рдЗрд╕реЗрдВрд╕ рдирд╡реАрдиреАрдХрд░рдг - 28 рдлрд░рд╡рд░реА\n\n**рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд░рд┐рдорд╛рдЗрдВрдбрд░ рд╕реЗрдЯ рдХрд░реЗрдВ:**\nЁЯУ▒ SMS рдЕрд▓рд░реНрдЯ\nЁЯУз рдИрдореЗрд▓ рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди\nЁЯУ▓ рд╡реНрд╣рд╛рдЯреНрд╕рдРрдк рдЕрдкрдбреЗрдЯ\n\n**рддрддреНрдХрд╛рд▓ рдХрд╛рд░реНрдп:** рдЕрдиреБрдкрд╛рд▓рди рдЯреНрд░реИрдХрд░ рдкреЗрдЬ рдкрд░ рдЬрд╛рдПрдВ`
        : `тП░ **Compliance Calendar & Important Dates**\n\n**This Month's Deadlines:**\n\nЁЯФ┤ **Urgent Actions (Within 7 days):**\nтАв GST Return Filing - Jan 20\nтАв TDS Payment - Jan 7\nтАв Fire Safety License Renewal - Jan 15\n\nЁЯЯб **Upcoming Deadlines (Within 30 days):**\nтАв Income Tax Return - Jan 31\nтАв EPF Payment - Feb 15\nтАв Trade License Renewal - Feb 28\n\n**Set Automatic Reminders:**\nЁЯУ▒ SMS Alerts\nЁЯУз Email Notifications\nЁЯУ▓ WhatsApp Updates\n\n**Immediate Action:** Visit Compliance Tracker page`;
    }

    // Scheme and incentive queries
    if (lowerQuery.includes('scheme') || lowerQuery.includes('incentive') || lowerQuery.includes('benefit') ||
        lowerQuery.includes('рдпреЛрдЬрдирд╛') || lowerQuery.includes('рдкреНрд░реЛрддреНрд╕рд╛рд╣рди') || lowerQuery.includes('рд▓рд╛рдн')) {
      return language === 'hi'
        ? `ЁЯОп **рд╡реНрдпрдХреНрддрд┐рдЧрдд рдпреЛрдЬрдирд╛ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ**\n\n**рдЖрдкрдХреЗ рд╡реНрдпрд╡рд╕рд╛рдп рдХреЗ рд▓рд┐рдП рдореИрдЪ рдХреА рдЧрдИ рдпреЛрдЬрдирд╛рдПрдВ:**\n\nЁЯМЯ **рдЙрдЪреНрдЪ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ (рддрддреНрдХрд╛рд▓ рдЖрд╡реЗрджрди рдХрд░реЗрдВ):**\nтАв рд╕реНрдЯрд╛рд░реНрдЯрдЕрдк рдЗрдВрдбрд┐рдпрд╛ рд╕реАрдб рдлрдВрдб - тВ╣50 рд▓рд╛рдЦ рддрдХ\nтАв рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рд░реЛрдЬрдЧрд╛рд░ рд╕реГрдЬрди рдХрд╛рд░реНрдпрдХреНрд░рдо - тВ╣25 рд▓рд╛рдЦ рддрдХ\nтАв рдореБрджреНрд░рд╛ рд▓реЛрди рдпреЛрдЬрдирд╛ - тВ╣10 рд▓рд╛рдЦ рддрдХ\n\nЁЯТ░ **рдХрд░ рд▓рд╛рдн рдпреЛрдЬрдирд╛рдПрдВ:**\nтАв рдзрд╛рд░рд╛ 80-рдЖрдИрдП рдХрд░ рдЫреВрдЯ - 100% рдХрд░ рдЫреВрдЯ 3 рд╕рд╛рд▓\nтАв рдЬреАрдПрд╕рдЯреА рдЫреВрдЯ - тВ╣40 рд▓рд╛рдЦ рддрдХ рдЯрд░реНрдирдУрд╡рд░\n\nЁЯУЛ **рдЖрд╡реЗрджрди рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдВ:**\nтЬЕ рдЖрдкрдХреА рдкрд╛рддреНрд░рддрд╛: 95% рдореИрдЪ\nтЬЕ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рддреИрдпрд╛рд░: 80% рдкреВрд░реНрдг\n\n**рддрддреНрдХрд╛рд▓ рдХрд╛рд░реНрдп:** рдпреЛрдЬрдирд╛ рдкреГрд╖реНрда рдкрд░ рдЬрд╛рдХрд░ рдЖрд╡реЗрджрди рд╢реБрд░реВ рдХрд░реЗрдВ`
        : `ЁЯОп **Personalized Scheme Recommendations**\n\n**Matched Schemes for Your Business:**\n\nЁЯМЯ **High Priority (Apply Immediately):**\nтАв Startup India Seed Fund - Up to тВ╣50 lakhs\nтАв PM Employment Generation Programme - Up to тВ╣25 lakhs\nтАв Mudra Loan Scheme - Up to тВ╣10 lakhs\n\nЁЯТ░ **Tax Benefit Schemes:**\nтАв Section 80-IA Tax Exemption - 100% tax exemption for 3 years\nтАв GST Exemption - Up to тВ╣40 lakhs turnover\n\nЁЯУЛ **Application Requirements:**\nтЬЕ Your Eligibility: 95% Match\nтЬЕ Documents Ready: 80% Complete\n\n**Immediate Action:** Visit schemes page to start application`;
    }

    // General business guidance
    if (lowerQuery.includes('start') || lowerQuery.includes('begin') || lowerQuery.includes('new business') ||
        lowerQuery.includes('рд╢реБрд░реВ') || lowerQuery.includes('рдирдпрд╛ рд╡реНрдпрд╡рд╕рд╛рдп') || lowerQuery.includes('рдЖрд░рдВрдн')) {
      return language === 'hi'
        ? `ЁЯЪА **рдирдпрд╛ рд╡реНрдпрд╡рд╕рд╛рдп рд╢реБрд░реВ рдХрд░рдиреЗ рдХрд╛ рдкреВрд░рд╛ рдЧрд╛рдЗрдб**\n\n**рдЪрд░рдгрдмрджреНрдз рдкреНрд░рдХреНрд░рд┐рдпрд╛:**\n\n**рдЪрд░рдг 1: рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рд╕рдВрд░рдЪрдирд╛ рдЪреБрдиреЗрдВ (рдЖрдЬ)**\nтАв рдПрдХрд▓ рд╕реНрд╡рд╛рдорд┐рддреНрд╡ - рд╕рдмрд╕реЗ рд╕рд░рд▓\nтАв рд╕рд╛рдЭреЗрджрд╛рд░реА рдлрд░реНрдо - 2+ рд╕рд╛рдЭреАрджрд╛рд░\nтАв рдкреНрд░рд╛рдЗрд╡реЗрдЯ рд▓рд┐рдорд┐рдЯреЗрдб - рд╕реАрдорд┐рдд рджреЗрдпрддрд╛\n\n**рдЪрд░рдг 2: рдкрдВрдЬреАрдХрд░рдг (1-2 рд╕рдкреНрддрд╛рд╣)**\nтАв рдХрдВрдкрдиреА рдирд╛рдо рдЖрд░рдХреНрд╖рдг\nтАв рдирд┐рдЧрдорди рдкреНрд░рдорд╛рдгрдкрддреНрд░\nтАв рдкреИрди рдФрд░ рдЯреИрди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ\n\n**рдЪрд░рдг 3: рдЕрдиреБрдкрд╛рд▓рди рд╕реЗрдЯрдЕрдк (2-3 рд╕рдкреНрддрд╛рд╣)**\nтАв рдЬреАрдПрд╕рдЯреА рдкрдВрдЬреАрдХрд░рдг\nтАв рд╡реНрдпрд╛рдкрд╛рд░ рд▓рд╛рдЗрд╕реЗрдВрд╕\nтАв рдмреИрдВрдХ рдЦрд╛рддрд╛ рдЦреЛрд▓рдирд╛\n\n**рдЕрдиреБрдорд╛рдирд┐рдд рд▓рд╛рдЧрдд:** тВ╣8,000-15,000\n**рдЕрдиреБрдорд╛рдирд┐рдд рд╕рдордп:** 3-4 рд╕рдкреНрддрд╛рд╣\n\n**рдЕрдЧрд▓рд╛ рдХрджрдо:** рдкрдВрдЬреАрдХрд░рдг рдлреЙрд░реНрдо рднрд░рдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ`
        : `ЁЯЪА **Complete Guide to Starting New Business**\n\n**Step-by-Step Process:**\n\n**Step 1: Choose Business Structure (Today)**\nтАв Sole Proprietorship - Simplest\nтАв Partnership Firm - 2+ Partners\nтАв Private Limited - Limited Liability\n\n**Step 2: Registration (1-2 weeks)**\nтАв Company Name Reservation\nтАв Certificate of Incorporation\nтАв Obtain PAN and TAN\n\n**Step 3: Compliance Setup (2-3 weeks)**\nтАв GST Registration\nтАв Trade License\nтАв Bank Account Opening\n\n**Estimated Cost:** тВ╣8,000-15,000\n**Estimated Time:** 3-4 weeks\n\n**Next Step:** Start filling registration form`;
    }
    
    // Default enhanced intelligent response with user context
    return language === 'hi'
      ? `ЁЯдЦ **AI рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ - рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕рд╣рд╛рдпрддрд╛**\n\nрдореИрдВ "${query}" рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЖрдкрдХреЗ рд╕рд╡рд╛рд▓ рдХреЛ рд╕рдордЭ рдЧрдпрд╛ рд╣реВрдВред рдЖрдкрдХреА рдкреНрд░реЛрдлрд╛рдЗрд▓ рдХреЗ рдЖрдзрд╛рд░ рдкрд░, рдпрд╣рд╛рдВ рд╣реИрдВ рд╕рдмрд╕реЗ рдкреНрд░рд╛рд╕рдВрдЧрд┐рдХ рд╕рд╣рд╛рдпрддрд╛ рд╡рд┐рдХрд▓реНрдк:\n\n**рддрддреНрдХрд╛рд▓ рд╕рд╣рд╛рдпрддрд╛ рдЙрдкрд▓рдмреНрдз:**\nЁЯФ┤ рдПрдХреНрд╕рдкреНрд░реЗрд╕ рд╕рд╣рд╛рдпрддрд╛ - рддреБрд░рдВрдд рдЬрд╡рд╛рдм\nЁЯЯв рд╕рд░рдХрд╛рд░реА рдЕрдзрд┐рдХрд╛рд░реА рд▓рд╛рдЗрд╡ рдЪреИрдЯ\nЁЯУЛ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рд╕рддреНрдпрд╛рдкрди рд╕реЗрд╡рд╛\nЁЯУК рд░рд┐рдпрд▓-рдЯрд╛рдЗрдо рдЖрд╡реЗрджрди рдЯреНрд░реИрдХрд┐рдВрдЧ\nЁЯТ│ рдкреЗрдореЗрдВрдЯ рдЧреЗрдЯрд╡реЗ рд╕рд╣рд╛рдпрддрд╛\n\n**рд╕реНрдорд╛рд░реНрдЯ рд╕реБрдЭрд╛рд╡:**\nтАв рдЖрдкрдХреЗ рдХреНрд╖реЗрддреНрд░ рдХреЗ рд▓рд┐рдП рд╡рд┐рд╢реЗрд╖ рдпреЛрдЬрдирд╛рдПрдВ\nтАв рд╕рдордп рд╕реАрдорд╛ рдЕрдиреБрд╕реНрдорд╛рд░рдХ рд╕реЗрдЯрдЕрдк\nтАв рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдЕрдиреБрдкрд╛рд▓рди рдЪреЗрдХрд▓рд┐рд╕реНрдЯ\n\n**рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рд╕реНрддрд░:** рдЙрдЪреНрдЪ\nрдХреГрдкрдпрд╛ рдЕрдзрд┐рдХ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдЬрд╛рдирдХрд╛рд░реА рджреЗрдВ рддрд╛рдХрд┐ рдореИрдВ рдмреЗрд╣рддрд░ рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХреВрдВред`
      : `ЁЯдЦ **AI Assistant - Personalized Help**\n\nI understand your question about "${query}". Based on your profile, here are the most relevant assistance options:\n\n**Immediate Help Available:**\nЁЯФ┤ Express Support - Instant answers\nЁЯЯв Government Officer Live Chat\nЁЯУЛ Document Verification Service\nЁЯУК Real-time Application Tracking\nЁЯТ│ Payment Gateway Assistance\n\n**Smart Suggestions:**\nтАв Specialized schemes for your sector\nтАв Deadline reminder setup\nтАв Business compliance checklist\n\n**Priority Level:** High\nPlease provide more specific details so I can assist you better.`;
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date(),
      attachments: attachments.length > 0 ? [...attachments] : undefined
    };

    setMessages(prev => [...prev, userMessage]);
    const query = inputMessage;
    setInputMessage('');
    setAttachments([]);
    setIsTyping(true);
    setIsLoading(true);

    try {
      // Simulate processing time for realism
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const aiResponse = generateRealTimeResponse(query);
      
      const responseSuggestions = language === 'hi' 
        ? [
          'рдореЗрд░реА рдЖрд╡реЗрджрди рд╕реНрдерд┐рддрд┐ рдЬрд╛рдВрдЪреЗрдВ',
          'рдЧреБрдо рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ',
          'рдЕрдзрд┐рдХрд╛рд░реА рдкрд░рд╛рдорд░реНрд╢ рд╢реЗрдбреНрдпреВрд▓ рдХрд░реЗрдВ',
          'рдЕрдиреБрдкрд╛рд▓рди рд░рд┐рдорд╛рдЗрдВрдбрд░ рд╕реЗрдЯ рдХрд░реЗрдВ',
          'рднреБрдЧрддрд╛рди рдЗрддрд┐рд╣рд╛рд╕ рджреЗрдЦреЗрдВ'
        ]
        : [
          'Check my application status',
          'Upload missing documents',
          'Schedule officer consultation',
          'Set compliance reminders',
          'View payment history'
        ];
      
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: aiResponse,
        timestamp: new Date(),
        suggestions: responseSuggestions,
        metadata: {
          confidence: 95,
          processingTime: 1200,
          intent: 'problem_solving',
          sources: ['Real-time Database', 'Government APIs', 'AI Analysis']
        }
      };
      
      setMessages(prev => [...prev, botResponse]);
      
      if (autoPlay && voiceEnabled) {
        setTimeout(() => {
          playMessageAudio(aiResponse);
        }, 500);
      }
      
    } catch (error) {
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: t.errorMessage,
        timestamp: new Date(),
        suggestions: t.errorSuggestions
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsTyping(false);
      setIsLoading(false);
    }
  };

  const handleVoiceInput = async () => {
    const { recognition } = speechServices.current;
    
    if (!recognition) {
      alert(t.voiceNotSupported);
      return;
    }

    if (isListening) {
      recognition.stop();
      setIsListening(false);
      return;
    }

    try {
      setIsListening(true);
      recognition.lang = selectedLanguage === 'hi' ? 'hi-IN' : 'en-US';
      
      recognition.onresult = (event: any) => {
        const transcript = event.results[0][0].transcript;
        setInputMessage(transcript);
        setIsListening(false);
      };

      recognition.onerror = () => {
        setIsListening(false);
      };

      recognition.start();
    } catch (error) {
      console.error('Voice input error:', error);
      setIsListening(false);
    }
  };

  const playMessageAudio = async (text: string) => {
    const { synthesis } = speechServices.current;
    
    if (!synthesis || isSpeaking) return;
    
    try {
      setIsSpeaking(true);
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = selectedLanguage === 'hi' ? 'hi-IN' : 'en-US';
      utterance.rate = 0.9;
      utterance.pitch = 1;
      utterance.volume = 1;

      utterance.onend = () => setIsSpeaking(false);
      utterance.onerror = () => setIsSpeaking(false);

      synthesis.speak(utterance);
    } catch (error) {
      console.error('Text-to-speech error:', error);
      setIsSpeaking(false);
    }
  };

  const stopSpeaking = () => {
    const { synthesis } = speechServices.current;
    if (synthesis) {
      synthesis.cancel();
      setIsSpeaking(false);
    }
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files) return;

    Array.from(files).forEach(file => {
      const attachment: Attachment = {
        id: Date.now().toString() + Math.random().toString(36),
        name: file.name,
        type: file.type,
        size: file.size,
        url: URL.createObjectURL(file)
      };
      setAttachments(prev => [...prev, attachment]);
    });
  };

  const removeAttachment = (id: string) => {
    setAttachments(prev => prev.filter(att => att.id !== id));
  };

  const likeMessage = (messageId: string) => {
    setMessages(prev => prev.map(msg => 
      msg.id === messageId ? { ...msg, liked: !msg.liked } : msg
    ));
  };

  const bookmarkMessage = (messageId: string) => {
    setMessages(prev => prev.map(msg => 
      msg.id === messageId ? { ...msg, bookmarked: !msg.bookmarked } : msg
    ));
  };

  const copyMessage = (content: string) => {
    navigator.clipboard.writeText(content);
  };

  const handleQuickAction = (query: string) => {
    setInputMessage(query);
    setTimeout(() => handleSendMessage(), 100);
  };

  const clearChat = () => {
    setMessages([{
      id: '1',
      type: 'bot',
      content: t.greeting,
      timestamp: new Date(),
      suggestions: t.defaultSuggestions,
      metadata: {
        confidence: 100,
        processingTime: 0,
        intent: 'greeting'
      }
    }]);
  };

  const handleSuggestionClick = (suggestion: string) => {
    setInputMessage(suggestion);
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const quickActions = [
    {
      category: t.quickActions.licenses.category,
      icon: FileText,
      color: 'bg-blue-600',
      actions: t.quickActions.licenses.actions
    },
    {
      category: t.quickActions.schemes.category,
      icon: Award,
      color: 'bg-green-600',
      actions: t.quickActions.schemes.actions
    },
    {
      category: t.quickActions.compliance.category,
      icon: Shield,
      color: 'bg-purple-600',
      actions: t.quickActions.compliance.actions
    },
    {
      category: t.quickActions.support.category,
      icon: MessageCircle,
      color: 'bg-orange-600',
      actions: t.quickActions.support.actions
    }
  ];

  const capabilities = [
    { name: t.capabilities[0], icon: Mic, enabled: voiceEnabled },
    { name: t.capabilities[1], icon: Volume2, enabled: true },
    { name: t.capabilities[2], icon: Brain, enabled: contextualMode },
    { name: t.capabilities[3], icon: Sparkles, enabled: smartSuggestions },
    { name: t.capabilities[4], icon: Languages, enabled: true },
    { name: t.capabilities[5], icon: Shield, enabled: true }
  ];

  return (
    <div className={`h-screen flex flex-col p-6 relative z-10 overflow-hidden ${language === 'hi' ? 'lang-hi' : 'lang-en'}`}>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="h-full flex flex-col"
      >
        {/* Header - Fixed */}
        <div className="flex items-center justify-between mb-6 flex-shrink-0">
          <div>
            <h1 className="text-3xl font-bold text-foreground flex items-center space-x-3">
              <div className="relative">
                <div className="w-10 h-10 rounded-full bg-gradient-to-r from-blue-600 to-purple-600 flex items-center justify-center">
                  <Sparkles className="w-5 h-5 text-white" />
                </div>
                <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white animate-pulse"></div>
              </div>
              <span>{t.title}</span>
            </h1>
            <p className="text-muted-foreground">{t.subtitle}</p>
          </div>
          <div className="flex items-center space-x-2">
            <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20">
              <Shield className="w-3 h-3 mr-1" />
              {t.securePrivate}
            </Badge>
            <Button variant="outline" size="sm" onClick={() => setSelectedLanguage(selectedLanguage === 'en' ? 'hi' : 'en')}>
              <Languages className="w-4 h-4 mr-2" />
              {selectedLanguage === 'en' ? 'рд╣рд┐рдВрджреА' : 'English'}
            </Button>
            <Button variant="outline" size="sm" onClick={clearChat}>
              <RefreshCw className="w-4 h-4 mr-2" />
              {t.clear}
            </Button>
          </div>
        </div>

        {/* Main Content - Flexible with proper overflow handling */}
        <div className="flex-1 grid lg:grid-cols-4 gap-6 min-h-0 overflow-hidden">
          {/* Chat Interface - Scrollable */}
          <div className="lg:col-span-3 flex flex-col min-h-0">
            <Card className="flex-1 bg-card/50 backdrop-blur-sm flex flex-col min-h-0 border-2">
              <CardHeader className="flex-shrink-0 border-b border-border">
                <CardTitle className="flex items-center space-x-2">
                  <div className="relative">
                    <Avatar className="w-8 h-8">
                      <AvatarFallback className="bg-gradient-to-r from-blue-600 to-purple-600 text-white">
                        <Bot className="w-4 h-4" />
                      </AvatarFallback>
                    </Avatar>
                    <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 rounded-full border-2 border-white"></div>
                  </div>
                  <span>{t.online}</span>
                  <Badge variant="secondary" className="ml-auto">
                    {messages.length - 1} {t.messages}
                  </Badge>
                </CardTitle>
              </CardHeader>
              
              {/* Messages Area - Properly scrollable */}
              <CardContent className="flex-1 p-0 min-h-0 overflow-hidden">
                <ScrollArea className="h-full">
                  <div className="p-6 space-y-6">
                    {messages.map((message) => (
                      <motion.div
                        key={message.id}
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.3 }}
                        className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                      >
                        <div className={`flex items-start space-x-3 max-w-[85%] ${message.type === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>
                          <Avatar className="w-8 h-8 flex-shrink-0">
                            <AvatarFallback className={`${message.type === 'user' ? 'bg-gradient-to-r from-green-600 to-blue-600' : 'bg-gradient-to-r from-blue-600 to-purple-600'} text-white`}>
                              {message.type === 'user' ? 'U' : <Bot className="w-4 h-4" />}
                            </AvatarFallback>
                          </Avatar>
                          <div className={`rounded-2xl px-4 py-3 ${message.type === 'user' ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white' : 'bg-card border border-border'}`}>
                            <div className="whitespace-pre-wrap text-sm leading-relaxed">{message.content}</div>
                            {message.metadata && (
                              <div className="mt-2 text-xs opacity-70">
                                <div className="flex items-center space-x-2">
                                  {message.metadata.confidence && (
                                    <span>{language === 'hi' ? 'рд╡рд┐рд╢реНрд╡рд╕рдиреАрдпрддрд╛' : 'Confidence'}: {message.metadata.confidence}%</span>
                                  )}
                                  {message.metadata.processingTime && (
                                    <>
                                      <span>тАв</span>
                                      <span>{message.metadata.processingTime}ms</span>
                                    </>
                                  )}
                                </div>
                              </div>
                            )}
                            {message.type === 'bot' && (
                              <div className="flex items-center space-x-2 mt-3">
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => likeMessage(message.id)}
                                  className={`h-6 px-2 ${message.liked ? 'text-red-500' : ''}`}
                                >
                                  <ThumbsUp className="w-3 h-3" />
                                </Button>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => bookmarkMessage(message.id)}
                                  className={`h-6 px-2 ${message.bookmarked ? 'text-yellow-500' : ''}`}
                                >
                                  <Bookmark className="w-3 h-3" />
                                </Button>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => copyMessage(message.content)}
                                  className="h-6 px-2"
                                >
                                  <MessageSquare className="w-3 h-3" />
                                </Button>
                                {voiceEnabled && (
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => isSpeaking ? stopSpeaking() : playMessageAudio(message.content)}
                                    className="h-6 px-2"
                                  >
                                    {isSpeaking ? <VolumeX className="w-3 h-3" /> : <Volume2 className="w-3 h-3" />}
                                  </Button>
                                )}
                              </div>
                            )}
                          </div>
                        </div>
                      </motion.div>
                    ))}
                    
                    {/* Typing Indicator */}
                    <AnimatePresence>
                      {isTyping && (
                        <motion.div
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          exit={{ opacity: 0, y: -10 }}
                          className="flex justify-start"
                        >
                          <div className="flex items-start space-x-3">
                            <Avatar className="w-8 h-8">
                              <AvatarFallback className="bg-gradient-to-r from-blue-600 to-purple-600 text-white">
                                <Bot className="w-4 h-4" />
                              </AvatarFallback>
                            </Avatar>
                            <div className="bg-card border border-border rounded-2xl px-4 py-2">
                              <div className="flex space-x-1">
                                <div className="w-2 h-2 bg-current rounded-full animate-bounce"></div>
                                <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                                <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                              </div>
                            </div>
                          </div>
                        </motion.div>
                      )}
                    </AnimatePresence>

                    {/* Suggestions */}
                    {messages.length > 0 && messages[messages.length - 1].suggestions && (
                      <div className="mt-4">
                        <h4 className="text-sm font-medium text-muted-foreground mb-2">{t.suggestions}</h4>
                        <div className="flex flex-wrap gap-2 justify-start">
                          {messages[messages.length - 1].suggestions?.map((suggestion, index) => (
                            <motion.button
                              key={index}
                              initial={{ opacity: 0, scale: 0.9 }}
                              animate={{ opacity: 1, scale: 1 }}
                              transition={{ duration: 0.2, delay: index * 0.1 }}
                              onClick={() => handleSuggestionClick(suggestion)}
                              className="px-3 py-1 bg-blue-50 hover:bg-blue-100 dark:bg-blue-900/20 dark:hover:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded-full text-sm transition-colors duration-200"
                            >
                              {suggestion}
                            </motion.button>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                  <div ref={messagesEndRef} />
                </ScrollArea>
              </CardContent>
              
              {/* Input Area - Fixed at bottom */}
              <div className="flex-shrink-0 p-4 border-t border-border bg-card/50">
                {/* Attachments */}
                {attachments.length > 0 && (
                  <div className="mb-3 flex flex-wrap gap-2">
                    {attachments.map((attachment) => (
                      <div key={attachment.id} className="flex items-center space-x-2 bg-accent/20 rounded-lg px-3 py-1">
                        <span className="text-sm">{attachment.name}</span>
                        <span className="text-xs text-muted-foreground">({formatFileSize(attachment.size)})</span>
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-5 w-5"
                          onClick={() => removeAttachment(attachment.id)}
                        >
                          <X className="w-3 h-3" />
                        </Button>
                      </div>
                    ))}
                  </div>
                )}

                <div className="flex items-center space-x-2">
                  <Button
                    variant="outline"
                    size="icon"
                    onClick={() => fileInputRef.current?.click()}
                  >
                    <Paperclip className="w-4 h-4" />
                  </Button>
                  
                  <div className="flex-1 relative">
                    <Input
                      placeholder={t.messagePlaceholder}
                      value={inputMessage}
                      onChange={(e) => setInputMessage(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                      disabled={isLoading}
                      className="pr-12"
                    />
                  </div>
                  
                  <Button
                    variant="outline"
                    size="icon"
                    onClick={handleVoiceInput}
                    className={isListening ? 'bg-red-50 text-red-600' : ''}
                    disabled={!voiceEnabled}
                  >
                    {isListening ? <MicOff className="w-4 h-4" /> : <Mic className="w-4 h-4" />}
                  </Button>
                  
                  <Button 
                    onClick={handleSendMessage} 
                    disabled={!inputMessage.trim() || isLoading}
                    className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
                  >
                    <Send className="w-4 h-4" />
                  </Button>

                  <input
                    ref={fileInputRef}
                    type="file"
                    multiple
                    className="hidden"
                    onChange={handleFileUpload}
                    accept=".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png"
                  />
                </div>

                {/* Quick Settings */}
                <div className="mt-3 flex items-center justify-between">
                  <div className="flex items-center space-x-4 text-xs">
                    <div className="flex items-center space-x-2">
                      <Switch
                        checked={voiceEnabled}
                        onCheckedChange={setVoiceEnabled}
                        className="scale-75"
                      />
                      <Label className="text-xs">{t.settings.voiceEnabled}</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Switch
                        checked={autoPlay}
                        onCheckedChange={setAutoPlay}
                        className="scale-75"
                      />
                      <Label className="text-xs">{t.settings.autoPlay}</Label>
                    </div>
                  </div>
                  <Select value={selectedModel} onValueChange={setSelectedModel}>
                    <SelectTrigger className="w-32 h-8 text-xs">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="basic">{language === 'hi' ? 'рдмреЗрд╕рд┐рдХ' : 'Basic'}</SelectItem>
                      <SelectItem value="advanced">{language === 'hi' ? 'рдПрдбрд╡рд╛рдВрд╕реНрдб' : 'Advanced'}</SelectItem>
                      <SelectItem value="expert">{language === 'hi' ? 'рдПрдХреНрд╕рдкрд░реНрдЯ' : 'Expert'}</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </Card>
          </div>

          {/* Sidebar - Quick Actions and Capabilities */}
          <div className="lg:col-span-1 space-y-6 overflow-y-auto">
            {/* Quick Actions */}
            <Card className="bg-card/50 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="text-lg">{language === 'hi' ? 'рддреНрд╡рд░рд┐рдд рдХрд╛рд░реНрдп' : 'Quick Actions'}</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {quickActions.map((category, index) => {
                  const Icon = category.icon;
                  return (
                    <div key={index} className="space-y-2">
                      <div className="flex items-center space-x-2">
                        <div className={`w-6 h-6 rounded-full ${category.color} flex items-center justify-center`}>
                          <Icon className="w-3 h-3 text-white" />
                        </div>
                        <h4 className="text-sm font-medium">{category.category}</h4>
                      </div>
                      <div className="space-y-1 pl-8">
                        {category.actions.slice(0, 2).map((action, actionIndex) => (
                          <button
                            key={actionIndex}
                            onClick={() => handleQuickAction(action)}
                            className="block text-xs text-muted-foreground hover:text-foreground transition-colors duration-200 text-left"
                          >
                            {action}
                          </button>
                        ))}
                      </div>
                    </div>
                  );
                })}
              </CardContent>
            </Card>

            {/* AI Capabilities */}
            <Card className="bg-card/50 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="text-lg">{language === 'hi' ? 'рдПрдЖрдИ рдХреНрд╖рдорддрд╛рдПрдВ' : 'AI Capabilities'}</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {capabilities.map((capability, index) => {
                  const Icon = capability.icon;
                  return (
                    <div key={index} className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <Icon className="w-4 h-4 text-muted-foreground" />
                        <span className="text-sm">{capability.name}</span>
                      </div>
                      <div className={`w-2 h-2 rounded-full ${capability.enabled ? 'bg-green-500' : 'bg-gray-400'}`}></div>
                    </div>
                  );
                })}
              </CardContent>
            </Card>
          </div>
        </div>
      </motion.div>
    </div>
  );
}